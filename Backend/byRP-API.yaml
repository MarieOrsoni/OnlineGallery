info:
  title: My online shop
  description:
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: products
    description: Product in online store
    externalDocs:
      description: Find out more about this project
      url: https://github.com/your-username...
  - name: store
    description: Access to product orders
  - name: user
    description: Operations about user
paths:
  /products:
    put:
      tags:
        - products
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/xml:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "422":
          description: Validation exception
      security:
        - productstore_auth:
            - write:products
            - read:products
    post:
      tags:
        - products
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addNewProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/xml:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
        - productstore_auth:
            - write:products
            - read:products
  /products/findByStatus:
    get:
      tags:
        - products
      summary: Finds Products by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findProductsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: Invalid status value
      security:
        - productstore_auth:
            - write:products
            - read:products
  /products/findByTags:
    get:
      tags:
        - products
      summary: Finds Products by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findProductsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: Invalid tag value
      security:
        - productstore_auth:
            - write:products
            - read:products
  /products/{productId}:
    get:
      tags:
        - products
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      security:
        - api_key: []
        - productstore_auth:
            - write:products
            - read:products
    post:
      tags:
        - products
      summary: Updates a product in the store with details
      description: ""
      operationId: updateProductDetails
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of product that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of product that needs to be updated
          schema:
            type: string
      responses:
        "400":
          description: Invalid input
      security:
        - productstore_auth:
            - write:products
            - read:products
    delete:
      tags:
        - products
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid product value
      security:
        - productstore_auth:
            - write:products
            - read:products
  /products/{productId}/uploadImage:
    post:
      tags:
        - product
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - productstore_auth:
            - write:products
            - read:products
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns store inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a product
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        productId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
        customer:
          $ref: "#/components/schemas/Customer"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Canvas
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "#ffcc00"
        description:
          type: string
      xml:
        name: tag
    Product:
      required:
        - name
        - photoUrls
        - category
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        name:
          type: string
          example: Golden Horizon
        description:
          type: string
          example: A dreamy seascape painted in acrylics, part of the "Ocean light" series.
        category:
          $ref: "#/components/schemas/Category"
        productType:
          type: string
          description: Type of item (e.g., original artwork, print, merch)
          enum: [original, print, merch]
          example: original
        medium:
          type: string
          example: Acrylic on canvas
        measurement:
          type: string
          example: 80cm x 100cm
        width:
          type: number
          format: float
          example: 80
        height:
          type: number
          format: float
          example: 100
        year:
          type: string
          example: "2023"
        original:
          type: boolean
          example: true
        signed:
          type: boolean
          example: true
        price:
          type: number
          format: float
          example: 350.0
        status:
          type: string
          enum: [available, pending, sold]
          example: available
        stock:
          type: integer
          example: 3
        sku:
          type: string
          example: ART-2023-GH01
        edition:
          type: string
          example: 1/25
        framed:
          type: boolean
          example: false
        shippingInfo:
          type: string
          example: Ships within 5 business days
        photoUrls:
          type: array
          items:
            type: string
          example: ["/images/horizon.jpg"]
        thumbnail:
          type: string
          example: /thumbs/horizon-thumb.jpg
        materials:
          type: array
          items:
            type: string
          example: ["Canvas", "Wooden frame"]
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        artist:
          type: string
          example: RP
        relatedProducts:
          type: array
          items:
            type: integer
          example: [102, 105]
      xml:
        name: product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
        application/xml:
          schema:
            $ref: "#/components/schemas/Product"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    productstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:products: modify products in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
